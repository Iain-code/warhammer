// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: enhancements.sql

package db

import (
	"context"
)

const addNewEnhancement = `-- name: AddNewEnhancement :one
INSERT INTO enhancements (faction_id, name, cost, detachment, description)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, faction_id, name, cost, detachment, description
`

type AddNewEnhancementParams struct {
	FactionID   string
	Name        string
	Cost        int32
	Detachment  string
	Description string
}

func (q *Queries) AddNewEnhancement(ctx context.Context, arg AddNewEnhancementParams) (Enhancement, error) {
	row := q.db.QueryRowContext(ctx, addNewEnhancement,
		arg.FactionID,
		arg.Name,
		arg.Cost,
		arg.Detachment,
		arg.Description,
	)
	var i Enhancement
	err := row.Scan(
		&i.ID,
		&i.FactionID,
		&i.Name,
		&i.Cost,
		&i.Detachment,
		&i.Description,
	)
	return i, err
}

const deleteEnhancement = `-- name: DeleteEnhancement :exec
DELETE FROM enhancements
WHERE id = $1
`

func (q *Queries) DeleteEnhancement(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEnhancement, id)
	return err
}

const getEnhancementFromId = `-- name: GetEnhancementFromId :one
SELECT id, faction_id, name, cost, detachment, description FROM enhancements
WHERE id = $1
`

func (q *Queries) GetEnhancementFromId(ctx context.Context, id int32) (Enhancement, error) {
	row := q.db.QueryRowContext(ctx, getEnhancementFromId, id)
	var i Enhancement
	err := row.Scan(
		&i.ID,
		&i.FactionID,
		&i.Name,
		&i.Cost,
		&i.Detachment,
		&i.Description,
	)
	return i, err
}

const getEnhancements = `-- name: GetEnhancements :many
SELECT id, faction_id, name, cost, detachment, description FROM enhancements
`

func (q *Queries) GetEnhancements(ctx context.Context) ([]Enhancement, error) {
	rows, err := q.db.QueryContext(ctx, getEnhancements)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Enhancement
	for rows.Next() {
		var i Enhancement
		if err := rows.Scan(
			&i.ID,
			&i.FactionID,
			&i.Name,
			&i.Cost,
			&i.Detachment,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnhancementsForFaction = `-- name: GetEnhancementsForFaction :many
SELECT id, faction_id, name, cost, detachment, description FROM enhancements
WHERE faction_id = $1
`

func (q *Queries) GetEnhancementsForFaction(ctx context.Context, factionID string) ([]Enhancement, error) {
	rows, err := q.db.QueryContext(ctx, getEnhancementsForFaction, factionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Enhancement
	for rows.Next() {
		var i Enhancement
		if err := rows.Scan(
			&i.ID,
			&i.FactionID,
			&i.Name,
			&i.Cost,
			&i.Detachment,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEnhancement = `-- name: UpdateEnhancement :exec
UPDATE enhancements
SET 
  cost = $2,
  description = $3,
  detachment = $4,
  faction_id = $5,
  name = $6
WHERE id = $1
`

type UpdateEnhancementParams struct {
	ID          int32
	Cost        int32
	Description string
	Detachment  string
	FactionID   string
	Name        string
}

func (q *Queries) UpdateEnhancement(ctx context.Context, arg UpdateEnhancementParams) error {
	_, err := q.db.ExecContext(ctx, updateEnhancement,
		arg.ID,
		arg.Cost,
		arg.Description,
		arg.Detachment,
		arg.FactionID,
		arg.Name,
	)
	return err
}

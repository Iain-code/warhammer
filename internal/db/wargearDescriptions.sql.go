// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: wargearDescriptions.sql

package db

import (
	"context"
)

const getWargearDescriptions = `-- name: GetWargearDescriptions :many
SELECT id, datasheet_id, line, name, description, type FROM wargearDescription
WHERE datasheet_id = $1
`

func (q *Queries) GetWargearDescriptions(ctx context.Context, datasheetID int32) ([]Wargeardescription, error) {
	rows, err := q.db.QueryContext(ctx, getWargearDescriptions, datasheetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wargeardescription
	for rows.Next() {
		var i Wargeardescription
		if err := rows.Scan(
			&i.ID,
			&i.DatasheetID,
			&i.Line,
			&i.Name,
			&i.Description,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWargearDescriptions = `-- name: UpdateWargearDescriptions :one
UPDATE wargearDescription
SET
  datasheet_id = $2,
  line = $3,
  name = $4,
  description = $5,
  type = $6
  WHERE id = $1
RETURNING id, datasheet_id, line, name, description, type
`

type UpdateWargearDescriptionsParams struct {
	ID          int32
	DatasheetID int32
	Line        int32
	Name        string
	Description string
	Type        string
}

func (q *Queries) UpdateWargearDescriptions(ctx context.Context, arg UpdateWargearDescriptionsParams) (Wargeardescription, error) {
	row := q.db.QueryRowContext(ctx, updateWargearDescriptions,
		arg.ID,
		arg.DatasheetID,
		arg.Line,
		arg.Name,
		arg.Description,
		arg.Type,
	)
	var i Wargeardescription
	err := row.Scan(
		&i.ID,
		&i.DatasheetID,
		&i.Line,
		&i.Name,
		&i.Description,
		&i.Type,
	)
	return i, err
}

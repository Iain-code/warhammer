// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: points.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const getPointsForID = `-- name: GetPointsForID :many
SELECT id, datasheet_id, line, description, cost FROM points
WHERE datasheet_id = ANY($1)
`

func (q *Queries) GetPointsForID(ctx context.Context, datasheetID []int32) ([]Point, error) {
	rows, err := q.db.QueryContext(ctx, getPointsForID, pq.Array(datasheetID))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Point
	for rows.Next() {
		var i Point
		if err := rows.Scan(
			&i.ID,
			&i.DatasheetID,
			&i.Line,
			&i.Description,
			&i.Cost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPointsForOneID = `-- name: GetPointsForOneID :one
SELECT id, datasheet_id, line, description, cost FROM points
WHERE id = $1
`

func (q *Queries) GetPointsForOneID(ctx context.Context, id int32) (Point, error) {
	row := q.db.QueryRowContext(ctx, getPointsForOneID, id)
	var i Point
	err := row.Scan(
		&i.ID,
		&i.DatasheetID,
		&i.Line,
		&i.Description,
		&i.Cost,
	)
	return i, err
}

const updatePointsForID = `-- name: UpdatePointsForID :one
UPDATE points
SET
  datasheet_id = $2,
  line = $3,
  description = $4,
  cost = $5
  WHERE id = $1
  RETURNING id, datasheet_id, line, description, cost
`

type UpdatePointsForIDParams struct {
	ID          int32
	DatasheetID int32
	Line        int32
	Description string
	Cost        int32
}

func (q *Queries) UpdatePointsForID(ctx context.Context, arg UpdatePointsForIDParams) (Point, error) {
	row := q.db.QueryRowContext(ctx, updatePointsForID,
		arg.ID,
		arg.DatasheetID,
		arg.Line,
		arg.Description,
		arg.Cost,
	)
	var i Point
	err := row.Scan(
		&i.ID,
		&i.DatasheetID,
		&i.Line,
		&i.Description,
		&i.Cost,
	)
	return i, err
}

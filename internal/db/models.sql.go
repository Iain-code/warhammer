// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: models.sql

package db

import (
	"context"
	"database/sql"
)

const createModel = `-- name: CreateModel :exec
INSERT INTO models (old_id, datasheet_id, name, M, T, Sv, inv_sv, W, Ld, OC)
VALUES(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
)
`

type CreateModelParams struct {
	OldID       sql.NullInt32
	DatasheetID string
	Name        string
	M           string
	T           int32
	Sv          sql.NullString
	InvSv       sql.NullString
	W           sql.NullInt32
	Ld          sql.NullString
	Oc          sql.NullString
}

func (q *Queries) CreateModel(ctx context.Context, arg CreateModelParams) error {
	_, err := q.db.ExecContext(ctx, createModel,
		arg.OldID,
		arg.DatasheetID,
		arg.Name,
		arg.M,
		arg.T,
		arg.Sv,
		arg.InvSv,
		arg.W,
		arg.Ld,
		arg.Oc,
	)
	return err
}

const getModel = `-- name: GetModel :one
SELECT old_id, datasheet_id, name, m, t, sv, inv_sv, w, ld, oc FROM models
WHERE datasheet_id = $1
`

func (q *Queries) GetModel(ctx context.Context, datasheetID string) (Model, error) {
	row := q.db.QueryRowContext(ctx, getModel, datasheetID)
	var i Model
	err := row.Scan(
		&i.OldID,
		&i.DatasheetID,
		&i.Name,
		&i.M,
		&i.T,
		&i.Sv,
		&i.InvSv,
		&i.W,
		&i.Ld,
		&i.Oc,
	)
	return i, err
}

const getModelsForFaction = `-- name: GetModelsForFaction :many
SELECT models.old_id, models.datasheet_id, models.name, models.m, models.t, models.sv, models.inv_sv, models.w, models.ld, models.oc FROM models
JOIN faction ON models.datasheet_id = faction.id
WHERE faction.faction_id = $1
`

func (q *Queries) GetModelsForFaction(ctx context.Context, factionID sql.NullString) ([]Model, error) {
	rows, err := q.db.QueryContext(ctx, getModelsForFaction, factionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Model
	for rows.Next() {
		var i Model
		if err := rows.Scan(
			&i.OldID,
			&i.DatasheetID,
			&i.Name,
			&i.M,
			&i.T,
			&i.Sv,
			&i.InvSv,
			&i.W,
			&i.Ld,
			&i.Oc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWargearForModel = `-- name: GetWargearForModel :many
SELECT wargear.datasheet_id, wargear.field2, wargear.name, wargear.range, wargear.type, wargear.a, wargear.bs_ws, wargear.s, wargear.ap, wargear.d FROM wargear
JOIN models ON wargear.datasheet_id = models.datasheet_id
WHERE wargear.datasheet_id = $1
`

func (q *Queries) GetWargearForModel(ctx context.Context, datasheetID int32) ([]Wargear, error) {
	rows, err := q.db.QueryContext(ctx, getWargearForModel, datasheetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wargear
	for rows.Next() {
		var i Wargear
		if err := rows.Scan(
			&i.DatasheetID,
			&i.Field2,
			&i.Name,
			&i.Range,
			&i.Type,
			&i.A,
			&i.BsWs,
			&i.S,
			&i.Ap,
			&i.D,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

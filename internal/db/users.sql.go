// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, username, hashed_password)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, created_at, updated_at, username, hashed_password, is_admin
`

type CreateUserParams struct {
	ID             uuid.UUID
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
	Username       string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.HashedPassword,
		&i.IsAdmin,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, username, hashed_password, is_admin FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.HashedPassword,
		&i.IsAdmin,
	)
	return i, err
}

const getUserFromUsername = `-- name: GetUserFromUsername :one
SELECT id, created_at, updated_at, username, hashed_password, is_admin FROM users
WHERE username = $1
`

func (q *Queries) GetUserFromUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.HashedPassword,
		&i.IsAdmin,
	)
	return i, err
}

const makeAdmin = `-- name: MakeAdmin :one
UPDATE users
SET is_admin = true
WHERE users.id = $1
RETURNING id, created_at, updated_at, username, hashed_password, is_admin
`

func (q *Queries) MakeAdmin(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, makeAdmin, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.HashedPassword,
		&i.IsAdmin,
	)
	return i, err
}

const removeAdmin = `-- name: RemoveAdmin :one
UPDATE users
SET is_admin = false
WHERE users.id = $1
RETURNING id, created_at, updated_at, username, hashed_password, is_admin
`

func (q *Queries) RemoveAdmin(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, removeAdmin, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.HashedPassword,
		&i.IsAdmin,
	)
	return i, err
}

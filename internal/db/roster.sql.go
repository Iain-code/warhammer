// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: roster.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getArmies = `-- name: GetArmies :many
SELECT id, user_id, army_list, enhancements, name, faction FROM roster
WHERE user_id = $1
`

func (q *Queries) GetArmies(ctx context.Context, userID uuid.UUID) ([]Roster, error) {
	rows, err := q.db.QueryContext(ctx, getArmies, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Roster
	for rows.Next() {
		var i Roster
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			pq.Array(&i.ArmyList),
			pq.Array(&i.Enhancements),
			&i.Name,
			&i.Faction,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveToRoster = `-- name: SaveToRoster :exec
INSERT INTO roster (id, user_id, army_list, enhancements, name, faction)
VALUES (
    $1, 
    $2, 
    $3, 
    $4,
    $5,
    $6
)
`

type SaveToRosterParams struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	ArmyList     []int32
	Enhancements []string
	Name         string
	Faction      string
}

func (q *Queries) SaveToRoster(ctx context.Context, arg SaveToRosterParams) error {
	_, err := q.db.ExecContext(ctx, saveToRoster,
		arg.ID,
		arg.UserID,
		pq.Array(arg.ArmyList),
		pq.Array(arg.Enhancements),
		arg.Name,
		arg.Faction,
	)
	return err
}
